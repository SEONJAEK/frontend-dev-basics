/*
    변수의 범위(Scope)
    1. 자바스크립트는 어휘에서 변수의 범위를 알 수 있다. (동적범위:Lexial Scope)
    2. ES6 이전(<=ES5)
        - 자바와 같은 블록범위를 지원하지 못했다.
        - 함수범위
        - function(){...} 안에서 변수 앞에 var 키워드를 사용하면 함수 범위를 가지게 된다.
        - 만약에  var 키워드가 없이 함수 안에서 변수를 정의하면 전역범위를 가지게 된다.(hoisting)
    3. ES6 이후(ES6)
        - Block Scope을 적용할 수 잇는 두개의 키워드를 지원(let(let이 var를 포함), const:상수(두번대입X))
        - let:변수
        - const: 상수
    
    4. 결론
        const / let 만 사용하고 반드시 붙이자(안붙히면 hoisting 일어남)

*/



var i=10;
var f =  function(){
    var i = 20;
    j = 100;
    console.log(i);
    i= j-1;
   
}

// var 키워드는 함수블록에서 함수 범위만 가지게 할 때 적용된다.
if(90+10 == 100){
    var k = 20;//전역임
}

o = { }; //객체를 의미하는 리터럴을 의미

{} //코드를 담고있는 블록

f();

{   
    let x = 1000000;
    const PI = 3.14;
    x = 100;
}
console.log(i);
console.log(j);
console.log(k);

//실행전 구문에러 
//실행후 실행에러

o;
p;

var p; //정의하는 구문 //undefined
//p; //변수에 해당하는 값을 참조해라(가져와라)

//구문: 실행단위

//표현식or 구문(실행단위: ;)
//세미콜론의 역할: 표현식을 구문으로 만듬(실행을 하게 만듬)
// /n개행: 어떨때는 세미콜론, 혹은 space bar처럼 구분하는 역할을 함


